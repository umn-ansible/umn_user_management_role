---
- name: usermanagement - Create primary groups for deploy, service users
  ansible.builtin.group:
    name: '{{ item.primary_group }}'
    state: present
  loop: '{{ umn_user_management_deploy_users + umn_user_management_service_users }}'
  tags:
    - usermanagement

- name: usermanagement - Create service users
  ansible.builtin.user:
    name: '{{ item.name }}'
    uid: '{{ item.uid }}'
    shell: '{{ item.shell | default("/bin/false") }}'
    comment: '{{ item.comment | default("UMN Service User") }}'
    create_home: '{{ item.create_home | default(false) }}'
    group: '{{ item.primary_group }}'
    groups: '{{ item.groups }}'
    # ! locks password auth on Linux
    password: '!'
    state: '{{ item.revoke | default(False) | ternary("absent", "present") }}'
  loop: '{{ umn_user_management_service_users }}'
  tags:
    - usermanagement

- name: usermanagement - Create deploy users
  ansible.builtin.user:
    name: '{{ item.name }}'
    uid: '{{ item.uid }}'
    shell: '{{ item.shell | default("/bin/bash") }}'
    comment: '{{ item.comment | default("UMN deploy user") }}'
    create_home: true
    group: '{{ item.primary_group }}'
    groups: '{{ item.groups }}'
    # ! locks password auth on Linux
    password: '!'
    state: '{{ item.revoke | default(False) | ternary("absent", "present") }}'
  loop: '{{ umn_user_management_deploy_users }}'
  tags:
    - usermanagement

# Capture initial state of ssh key files for deploy users
- stat:
    path: /home/{{ item.name }}/.ssh/authorized_keys
    get_checksum: true
  loop: '{{ umn_user_management_deploy_users }}'
  register: umn_user_management_deploy_key_stat_initial
  tags:
    - usermanagement

# ALWAYS start with a clean slate for deploy user keys, enabling
# ansible to use loops over human users' keys without worry
# about previously revoked keys and the fact that this module
# require multiple keys to be installed as a single string body
# rather than as a loop in order for the exclusive attr to work
- name: usermanagement - Remove all existing deploy user keys
  file:
    path: /home/{{ item.name }}/.ssh/authorized_keys
    state: absent
  loop: '{{ umn_user_management_deploy_users }}'
  # always green
  changed_when: false
  tags:
    - usermanagement

- name: usermanagement - Install deploy user ssh keys for directory users
  ansible.posix.authorized_key:
    user: '{{ item.0.name }}'
    key: '{{ item.1.authorized_keys | default([]) | list | flatten | join("\n") }}'
    comment: '{{ item.1.name }}'
    state: present
  when:  item.0.authorized_keys_from_directory_users | default(False)
  # Nested/2D loop over deploy users and ssh key users
  loop: '{{ umn_user_management_deploy_users | product(umn_user_management_permitted_users) | list }}'
  # Changes will be examined later, combining this with following additional keys task
  changed_when: false
  tags:
    - usermanagement

- name: usermanagement - Install additional deploy user individual ssh keys
  ansible.posix.authorized_key:
    user: '{{ item.name }}'
    key: '{{ item.additional_authorized_keys | default([]) | list | flatten | join("\n") }}'
    state: present
  when: item.additional_authorized_keys | default([]) | list | length > 0
  loop: '{{ umn_user_management_deploy_users }}'
  # Changes will be examined later, combining this with prior directory user keys task
  changed_when: false
  tags:
    - usermanagement

- stat:
    path: /home/{{ item.name }}/.ssh/authorized_keys
    get_checksum: true
  loop: '{{ umn_user_management_deploy_users }}'
  register: umn_user_management_deploy_key_stat_post
  tags:
    - usermanagement

- name: usermanagement - Check for changes in deploy user ssh authorized key state
  debug: msg='Deploy user SSH keys {{ item.stat.path|default("") }} modified'
  changed_when: (item.stat.checksum|default('notexists')) != (umn_user_management_deploy_key_stat_post.results[stat_idx].stat.checksum|default('notexists'))
  loop: '{{ umn_user_management_deploy_key_stat_initial.results }}'
  loop_control:
    index_var: stat_idx
  tags:
    - usermanagement

- name: usermanagement - sudoers rules for deploy users
  community.general.sudoers:
    name: ansible-sudoers-deploy-{{ item.name }}
    state: present
    user: '{{ item.name }}'
    commands: '{{ item.sudoers_commands }}'
    nopassword: true
  loop: '{{ umn_user_management_deploy_users }}'
  when: item.sudoers_commands is defined and item.sudoers_commands|length > 0
  tags:
    - usermanagement
    - sudoers

# Ensure no orphaned sudoers files are left if the previous command isn't run
- name: usermanagement - sudoers purge unused files
  community.general.sudoers:
    name: ansible-sudoers-deploy-{{ item.name }}
    state: absent
  loop: '{{ umn_user_management_deploy_users }}'
  # Do this for deploy users without sudo defined
  when: item.sudoers_commands is undefined or item.sudoers_commands|length == 0
  tags:
    - usermanagement
    - sudoers

# Enable/disable cron users
- name: usermanagement - permit cron users
  ansible.builtin.lineinfile:
    path: /etc/cron.allow
    line: '{{ item.name }}'
    state: '{{ "present" if (item.allow_cron|default(false)) else "absent" }}'
  loop: '{{ umn_user_management_deploy_users + umn_user_management_service_users }}'
  tags:
    - usermanagement
    - cron
